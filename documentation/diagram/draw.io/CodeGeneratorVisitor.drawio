<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36" version="26.2.14">
  <diagram name="Trang-1" id="ae18-4LUJwS0NWcRIFIJ">
    <mxGraphModel grid="1" page="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="QYntLHn5jamX53g-AvuD-1" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="i1gnTmM2DgrWp9bDKEA0-1" target="i1gnTmM2DgrWp9bDKEA0-5">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="i1gnTmM2DgrWp9bDKEA0-1" value="abstract&lt;div&gt;CodeGeneratorVisitor&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;spacing=2;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="365" y="-170" width="187.5" height="60" as="geometry" />
        </mxCell>
        <mxCell id="i1gnTmM2DgrWp9bDKEA0-5" value="&lt;div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;Attributes&lt;div&gt;&lt;div&gt;# int indentLevel&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="227.5" y="-90" width="462.5" height="180" as="geometry" />
        </mxCell>
        <mxCell id="G2cZP-SPqrOAaB2idnXO-2" value="&lt;font&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;Methods&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;+ virtual ~CodeGeneratorVisitor() = default&lt;/div&gt;&lt;div&gt;+ virtual std::string generate(ASTNode* node) = 0&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitProgram(ProgramNode* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStyleInclude(StyleIncludeStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitGardenDecl(GardenDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitSpeciesDecl(SpeciesDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVisibilityBlock(VisibilityBlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBlock(BlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVariableDecl(VariableDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionDef(FunctionDefStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitReturn(ReturnStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitExpressionStmt(ExpressionStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBranch(BranchStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIO(IOStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIdentifierExpr(IdentifierExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitNumberLiteralExpr(NumberLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStringLiteralExpr(StringLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBooleanLiteralExpr(BooleanLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBinaryOpExpr(BinaryOpExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionCallExpr(FunctionCallExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitMemberAccessExpr(MemberAccessExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitAssignmentStmt(AssignmentStmt* node) = 0&lt;/span&gt;&lt;br&gt;&lt;div&gt;# std::string getIndent()&lt;/div&gt;&lt;div&gt;# std::string dispatch(ASTNode* node)&lt;/div&gt;&lt;div&gt;# std::string dispatchExpr(Expression* node)&lt;/div&gt;&lt;div&gt;# bool writeToFile(const std::string&amp;amp; filename, const std::string&amp;amp; content)&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;Package&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;~ #include &quot;generators/JavaCodeGenerator.cpp&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;~ #include &quot;generators/PythonCodeGenerator.cpp&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;~ #include &quot;generators/CppCodeGenerator.cpp&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;~ #include &quot;generators/JavaScriptCodeGenerator.cpp&quot;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="227.5" y="-40" width="462.5" height="730" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-2" value="&lt;div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Attributes&lt;/span&gt;&lt;div&gt;&lt;div&gt;# int indentLevel&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;- std::stringstream generatedCode_&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;- std::string className_ = &quot;GeneratedHanamiClass&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;- bool hasMain_ = false&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;- int indentLevel = 0&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="-529" y="990" width="462.5" height="120" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-4" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;fontSize=16;fontFamily=Times New Roman;" edge="1" parent="1" source="8L1cMwjb8lEWfGlkX8tH-3" target="8L1cMwjb8lEWfGlkX8tH-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-6" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0;entryY=1;entryDx=0;entryDy=0;fontSize=16;fontFamily=Times New Roman;" edge="1" parent="1" source="8L1cMwjb8lEWfGlkX8tH-3" target="G2cZP-SPqrOAaB2idnXO-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-3" value="extent&lt;div&gt;JavaCodeGenerator&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;spacing=2;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="-391.5" y="840" width="187.5" height="60" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-7" value="&lt;font&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Methods&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span&gt;- std::string mapType(const std::string&amp;amp; hanamiType)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;- std::string mapBinaryOperator(TokenType op)&lt;/span&gt;&lt;/div&gt;&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;+ virtual ~CodeGeneratorVisitor() = default&lt;/div&gt;&lt;div&gt;+ virtual std::string generate(ASTNode* node) = 0&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitProgram(ProgramNode* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStyleInclude(StyleIncludeStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitGardenDecl(GardenDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitSpeciesDecl(SpeciesDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVisibilityBlock(VisibilityBlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBlock(BlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVariableDecl(VariableDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionDef(FunctionDefStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitReturn(ReturnStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitExpressionStmt(ExpressionStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBranch(BranchStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIO(IOStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIdentifierExpr(IdentifierExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitNumberLiteralExpr(NumberLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStringLiteralExpr(StringLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBooleanLiteralExpr(BooleanLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBinaryOpExpr(BinaryOpExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionCallExpr(FunctionCallExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitMemberAccessExpr(MemberAccessExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitAssignmentStmt(AssignmentStmt* node) = 0&lt;/span&gt;&lt;br&gt;&lt;div&gt;# std::string getIndent()&lt;/div&gt;&lt;div&gt;# std::string dispatch(ASTNode* node)&lt;/div&gt;&lt;div&gt;# std::string dispatchExpr(Expression* node)&lt;/div&gt;&lt;div&gt;# bool writeToFile(const std::string&amp;amp; filename, const std::string&amp;amp; content)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="-529" y="1110" width="462.5" height="670" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-8" value="&lt;font&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Methods&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span&gt;- std::string mapType(const std::string&amp;amp; hanamiType)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;- std::string mapBinaryOperator(TokenType op)&lt;/span&gt;&lt;/div&gt;&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;+ virtual ~CodeGeneratorVisitor() = default&lt;/div&gt;&lt;div&gt;+ virtual std::string generate(ASTNode* node) = 0&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitProgram(ProgramNode* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStyleInclude(StyleIncludeStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitGardenDecl(GardenDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitSpeciesDecl(SpeciesDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVisibilityBlock(VisibilityBlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBlock(BlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVariableDecl(VariableDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionDef(FunctionDefStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitReturn(ReturnStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitExpressionStmt(ExpressionStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBranch(BranchStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIO(IOStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIdentifierExpr(IdentifierExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitNumberLiteralExpr(NumberLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStringLiteralExpr(StringLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBooleanLiteralExpr(BooleanLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBinaryOpExpr(BinaryOpExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionCallExpr(FunctionCallExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitMemberAccessExpr(MemberAccessExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitAssignmentStmt(AssignmentStmt* node) = 0&lt;/span&gt;&lt;br&gt;&lt;div&gt;# std::string getIndent()&lt;/div&gt;&lt;div&gt;# std::string dispatch(ASTNode* node)&lt;/div&gt;&lt;div&gt;# std::string dispatchExpr(Expression* node)&lt;/div&gt;&lt;div&gt;# bool writeToFile(const std::string&amp;amp; filename, const std::string&amp;amp; content)&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="20" y="1110" width="462.5" height="670" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-9" value="&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Attributes&lt;/span&gt;&lt;div&gt;&lt;div&gt;# int indentLevel&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;- std::stringstream generatedCode_&lt;/div&gt;&lt;div&gt;- std::string currentSpeciesName_&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="20" y="990" width="462.5" height="120" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-13" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.25;entryY=1;entryDx=0;entryDy=0;fontSize=16;fontFamily=Times New Roman;" edge="1" parent="1" source="8L1cMwjb8lEWfGlkX8tH-10" target="G2cZP-SPqrOAaB2idnXO-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-10" value="extent&lt;div&gt;JavascriptCodeGenerator&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;spacing=2;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="157.5" y="840" width="187.5" height="60" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-11" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;fontSize=16;fontFamily=Times New Roman;" edge="1" parent="1" source="8L1cMwjb8lEWfGlkX8tH-10" target="8L1cMwjb8lEWfGlkX8tH-9">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-14" value="&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Attributes&lt;/span&gt;&lt;div&gt;&lt;div&gt;# int indentLevel&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;-&lt;/span&gt;&lt;span style=&quot;background-color: transparent; color: light-dark(rgb(0, 0, 0), rgb(255, 255, 255));&quot;&gt;- std::stringstream generatedCode_&lt;/span&gt;&lt;/div&gt;&lt;div&gt;- std::set&amp;lt;std::string&amp;gt; includes_&lt;/div&gt;&lt;div&gt;- bool hasMain_ = false&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="570" y="990" width="462.5" height="120" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-15" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;fontSize=16;fontFamily=Times New Roman;" edge="1" parent="1" source="8L1cMwjb8lEWfGlkX8tH-16" target="8L1cMwjb8lEWfGlkX8tH-14">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-22" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=0.75;entryY=1;entryDx=0;entryDy=0;fontSize=16;fontFamily=Times New Roman;" edge="1" parent="1" source="8L1cMwjb8lEWfGlkX8tH-16" target="G2cZP-SPqrOAaB2idnXO-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-16" value="extent&lt;div&gt;CppCodeGenerator&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;spacing=2;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="707.5" y="840" width="187.5" height="60" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-19" value="&lt;div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Attributes&lt;/span&gt;&lt;div&gt;&lt;div&gt;# int indentLevel&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;- std::stringstream generatedCode_&lt;/div&gt;&lt;div&gt;- std::set&amp;lt;std::string&amp;gt; includes_&lt;/div&gt;&lt;div&gt;- bool hasMain_ = false&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="1129" y="990" width="462.5" height="120" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-23" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=0;exitDx=0;exitDy=0;entryX=1;entryY=1;entryDx=0;entryDy=0;fontSize=16;fontFamily=Times New Roman;" edge="1" parent="1" source="8L1cMwjb8lEWfGlkX8tH-20" target="G2cZP-SPqrOAaB2idnXO-2">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-20" value="extent&lt;div&gt;JavaCodeGenerator&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;spacing=2;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="1266.5" y="840" width="187.5" height="60" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-21" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;fontSize=16;fontFamily=Times New Roman;" edge="1" parent="1" source="8L1cMwjb8lEWfGlkX8tH-20" target="8L1cMwjb8lEWfGlkX8tH-19">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-24" value="&lt;font&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Methods&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span&gt;- std::string mapType(const std::string&amp;amp; hanamiType)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;- std::string mapBinaryOperator(TokenType op)&lt;/span&gt;&lt;/div&gt;&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;+ virtual ~CodeGeneratorVisitor() = default&lt;/div&gt;&lt;div&gt;+ virtual std::string generate(ASTNode* node) = 0&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitProgram(ProgramNode* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStyleInclude(StyleIncludeStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitGardenDecl(GardenDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitSpeciesDecl(SpeciesDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVisibilityBlock(VisibilityBlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBlock(BlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVariableDecl(VariableDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionDef(FunctionDefStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitReturn(ReturnStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitExpressionStmt(ExpressionStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBranch(BranchStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIO(IOStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIdentifierExpr(IdentifierExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitNumberLiteralExpr(NumberLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStringLiteralExpr(StringLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBooleanLiteralExpr(BooleanLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBinaryOpExpr(BinaryOpExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionCallExpr(FunctionCallExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitMemberAccessExpr(MemberAccessExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitAssignmentStmt(AssignmentStmt* node) = 0&lt;/span&gt;&lt;br&gt;&lt;div&gt;# std::string getIndent()&lt;/div&gt;&lt;div&gt;# std::string dispatch(ASTNode* node)&lt;/div&gt;&lt;div&gt;# std::string dispatchExpr(Expression* node)&lt;/div&gt;&lt;div&gt;# bool writeToFile(const std::string&amp;amp; filename, const std::string&amp;amp; content)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="570" y="1110" width="462.5" height="670" as="geometry" />
        </mxCell>
        <mxCell id="8L1cMwjb8lEWfGlkX8tH-25" value="&lt;font&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;Methods&lt;/span&gt;&lt;br&gt;&lt;div&gt;&lt;span&gt;- std::string mapType(const std::string&amp;amp; hanamiType)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;- std::string mapBinaryOperator(TokenType op)&lt;/span&gt;&lt;/div&gt;&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;+ virtual ~CodeGeneratorVisitor() = default&lt;/div&gt;&lt;div&gt;+ virtual std::string generate(ASTNode* node) = 0&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitProgram(ProgramNode* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStyleInclude(StyleIncludeStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitGardenDecl(GardenDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitSpeciesDecl(SpeciesDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVisibilityBlock(VisibilityBlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBlock(BlockStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitVariableDecl(VariableDeclStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionDef(FunctionDefStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitReturn(ReturnStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitExpressionStmt(ExpressionStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBranch(BranchStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIO(IOStmt* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitIdentifierExpr(IdentifierExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitNumberLiteralExpr(NumberLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitStringLiteralExpr(StringLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBooleanLiteralExpr(BooleanLiteralExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitBinaryOpExpr(BinaryOpExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitFunctionCallExpr(FunctionCallExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitMemberAccessExpr(MemberAccessExpr* node) = 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;# virtual std::string visitAssignmentStmt(AssignmentStmt* node) = 0&lt;/span&gt;&lt;br&gt;&lt;div&gt;# std::string getIndent()&lt;/div&gt;&lt;div&gt;# std::string dispatch(ASTNode* node)&lt;/div&gt;&lt;div&gt;# std::string dispatchExpr(Expression* node)&lt;/div&gt;&lt;div&gt;# bool writeToFile(const std::string&amp;amp; filename, const std::string&amp;amp; content)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="1129" y="1110" width="462.5" height="670" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
