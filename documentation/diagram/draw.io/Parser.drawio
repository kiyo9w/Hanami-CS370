<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36" version="26.2.14">
  <diagram name="Trang-1" id="ae18-4LUJwS0NWcRIFIJ">
    <mxGraphModel grid="1" page="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="i1gnTmM2DgrWp9bDKEA0-6" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="1" source="i1gnTmM2DgrWp9bDKEA0-1" target="i1gnTmM2DgrWp9bDKEA0-4">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="i1gnTmM2DgrWp9bDKEA0-1" value="Parser" style="rounded=0;whiteSpace=wrap;html=1;spacing=2;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="390" y="100" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="i1gnTmM2DgrWp9bDKEA0-4" value="&lt;font&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;Attributes&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;font&gt;-&amp;nbsp;&lt;/font&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;const std::vector&amp;lt;Token&amp;gt;&amp;amp; tokens;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;- size_t current = 0;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;fontFamily=Times New Roman;" vertex="1" parent="1">
          <mxGeometry x="185" y="190" width="530" height="160" as="geometry" />
        </mxCell>
        <mxCell id="i1gnTmM2DgrWp9bDKEA0-5" value="&lt;font face=&quot;Times New Roman&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;/span&gt;Methods&lt;/font&gt;&lt;div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- const Token&amp;amp; peek() const&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- const Token&amp;amp; previous() const&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- bool isAtEnd() const&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- Token advance()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- bool check(TokenType type) const&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- bool match(const std::vector&amp;lt;TokenType&amp;gt;&amp;amp; types)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- Token consume(TokenType type, const std::string&amp;amp; message)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- void synchronize()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseDeclaration()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseStatement()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseStyleInclude()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseGardenDeclaration()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseSpeciesDeclaration()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;VisibilityBlockStmt&amp;gt; parseVisibilityBlock()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;BlockStmt&amp;gt; parseBlock()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseFunctionDefinition()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseVariableDeclarationOrExprStmt()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseBranchStatement()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseIOStatement(TokenType ioType)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseReturnStatement()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Statement&amp;gt; parseExpressionStatement()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseExpression()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseAssignment()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseLogicalOr()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseLogicalAnd()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseEquality()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseComparison()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseTerm()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseFactor()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseUnary()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parseCall()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- std::unique_ptr&amp;lt;Expression&amp;gt; parsePrimary()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- void error(const Token&amp;amp; token, const std::string&amp;amp; message)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- static std::unique_ptr&amp;lt;Expression&amp;gt; parseBinaryHelper(Parser* parser, std::function&amp;lt;std::unique_ptr&amp;lt;Expression&amp;gt;()&amp;gt; parseOperand, const std::vector&amp;lt;TokenType&amp;gt;&amp;amp; operators)&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;- static std::unique_ptr&amp;lt;Expression&amp;gt; finishCall(Parser* parser, std::unique_ptr&amp;lt;Expression&amp;gt; callee)&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;+&amp;nbsp;&lt;span style=&quot;background-color: transparent;&quot;&gt;Parser(const std::vector&amp;lt;Token&amp;gt;&amp;amp; tokens);&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Times New Roman&quot;&gt;+ std::unique_ptr&amp;lt;ProgramNode&amp;gt; parse();&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;verticalAlign=top;fontSize=16;" vertex="1" parent="1">
          <mxGeometry x="185" y="260" width="530" height="800" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
